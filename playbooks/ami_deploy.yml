---
- name: Prepare Key aythentication
  hosts: localhost
  connection: local
  gather_facts: True
  vars_files:
    - ../answerfile.yml
  tasks:
    - name: Set the Key location as fact 
      set_fact: 
        ssh_key_location: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
    - name: "Check that the SSH Key exists for {{ ansible_env.USER }} user"
      stat:
        path: "{{ ssh_key_location }}"
      register: sshkey_result
    - name: "Generating a new SSH key for {{ ansible_env.USER }} user if does not already exists"
      user:
        name: "{{ ansible_env.USER }}"
        generate_ssh_key: yes 
        ssh_key_bits: 2048
      when: sshkey_result.stat.exists == False
    - name: Creates an new ec2 key with mentioned name if not present
      ec2_key:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        name: "nsxman-key"
        state: present
        key_material:  "{{ lookup('file',  ssh_key_location ) }}"

- name: Deploy NSX Infra on AWS
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - ../answerfile.yml
  tasks:
    - name: Create Management Security Group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        vpc_id: "{{ mngvpc.vpc.id }}"
        name: ManagementSecGroup
        description: Security Group for NSX Management Components
        rules: "{{ ManagementSecGroup.rules }}"
        state: present
      register: mngmtsg
    - name: Tag the Management Security Groups
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        resource: "{{ mngmtsg.group_id }}"
        state: present
        tags:
          Name: "ManagementSecGroup"
          Project: "{{ project }}"
          Student: "{{ student }}"
    - name: Get NSX Manager AMI ID
      ec2_ami_find:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        name: "nsx-manager-*"
        sort: name
        sort_order: descending
        sort_end: 1
        no_result_action: fail
        state: available
      register: nsxmanami
    - name: Launch NSX Manager instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        image: "{{ nsxmanami.results[0].ami_id }}"
        instance_type: t2.large
        key_name: nsxman-key
        wait: yes
        vpc_subnet_id: "{{ mngsubnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags:
          Name: "NSX Manager"
          Project: "{{ project }}"
          Student: "{{ student }}"
        exact_count: 1
        count_tag:
          Name: "NSX Manager"
          Project: "{{ project }}"
          Student: "{{ student }}"
        group_id: "{{ mngmtsg.group_id }}"
      register: nsxmaninstance

    - name: Get NSX Controller AMI ID
      ec2_ami_find:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        name: "nsx-controller-*"
        sort: name
        sort_order: descending
        sort_end: 1
        no_result_action: fail
        state: available
      register: nsxctrami
    - name: Launch NSX Controller instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        image: "{{ nsxctrami.results[0].ami_id }}"
        instance_type: t2.medium
        key_name: nsxman-key
        wait: yes
        vpc_subnet_id: "{{ mngsubnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags:
          Name: "NSX Controller"
          Project: "{{ project }}"
          Student: "{{ student }}"
        exact_count: 1
        count_tag:
          Name: "NSX Controller"
          Project: "{{ project }}"
          Student: "{{ student }}"
        group_id: "{{ mngmtsg.group_id }}"
      register: nsxctrinstance

    - name: Get NSX CSM AMI ID
      ec2_ami_find:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        name: "nsx-csm-*"
        sort: name
        sort_order: descending
        sort_end: 1
        no_result_action: fail
        state: available
      register: nsxcsmami
    - name: Launch NSX CSM instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        image: "{{ nsxcsmami.results[0].ami_id }}"
        instance_type: t2.large
        key_name: nsxman-key
        wait: yes
        vpc_subnet_id: "{{ mngsubnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags:
          Name: "NSX CSM"
          Project: "{{ project }}"
          Student: "{{ student }}"
        exact_count: 1
        count_tag:
          Name: "NSX CSM"
          Project: "{{ project }}"
          Student: "{{ student }}"
        group_id: "{{ mngmtsg.group_id }}"
      register: nsxcsminstance

    - name: Check NSX Manager status
      ec2_remote_facts:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        filters:
          instance-id: "{{ nsxmaninstance.instance_ids[0] }}"
      register: nsxmanstatus
      until: nsxmanstatus.instances[0].state == "running"
      retries: 20
      delay: 30
    - name: Remove previous SSH keys from known_hosts - Manager
      command: 'ssh-keygen -R "{{ nsxmaninstance.instances[0].public_ip }}"'
      register: command_result
      failed_when: "command_result.rc > 0 and command_result.rc != 255"
    - name: Wait for SSH to come up on NSX Manager
      wait_for:
        host: "{{ nsxmaninstance.instances[0].public_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 30
    - name: add host to known_hosts - Manager
      shell: 'ssh-keyscan -H "{{ nsxmaninstance.instances[0].public_ip }}" >> ~/.ssh/known_hosts'

    - name: Check NSX Controller status
      ec2_remote_facts:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        filters:
          instance-id: "{{ nsxctrinstance.instance_ids[0] }}"
      register: nsxctrstatus
      until: nsxctrstatus.instances[0].state == "running"
      retries: 20
      delay: 30
    - name: Remove previous SSH keys from known_hosts - Controller
      command: 'ssh-keygen -R "{{ nsxctrinstance.instances[0].public_ip }}"'
      register: command_result2
      failed_when: "command_result2.rc > 0 and command_result2.rc != 255"
    - name: Wait for SSH to come up on NSX Controller
      wait_for:
        host: "{{ nsxctrinstance.instances[0].public_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 30
    - name: add host to known_hosts - Controller
      shell: 'ssh-keyscan -H "{{ nsxctrinstance.instances[0].public_ip }}" >> ~/.ssh/known_hosts'

    - name: Check NSX CSM status
      ec2_remote_facts:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ mng_vpc_region }}"
        filters:
          instance-id: "{{ nsxcsminstance.instance_ids[0] }}"
      register: nsxcsmstatus
      until: nsxcsmstatus.instances[0].state == "running"
      retries: 20
      delay: 30
    - name: Remove previous SSH keys from known_hosts - CSM
      command: 'ssh-keygen -R "{{ nsxcsminstance.instances[0].public_ip }}"'
      register: command_result3
      failed_when: "command_result3.rc > 0 and command_result3.rc != 255"
    - name: Wait for SSH to come up on NSX CSM
      wait_for:
        host: "{{ nsxcsminstance.instances[0].public_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 30
    - name: add host to known_hosts - CSM
      shell: 'ssh-keyscan -H "{{ nsxcsminstance.instances[0].public_ip }}" >> ~/.ssh/known_hosts'


